opt_out_usage
default_platform(:swift)

platform :swift do
  before_all do
    # Perform a fetch before inferring the next version
    # to reduce race conditions with simultaneous pipelines attempting to create the same tag
    sh('git', 'fetch', '--tags', '-f')
    sh('git', 'fetch')
  end

  desc "Kickoff the next release by updating the changelog, updating the component version, and creating a PR to main"
  lane :kickoff_release do
    next_version, commits = calculate_next_release_version

    UI.message("Kicking off new release for version: #{next_version}")
    # Increment all specs and plists
    increment_versions(version: next_version)

    # Update Changelog
    changelog = build_changelog(version: next_version, commits: commits)
    write_changelog(changelog: changelog, path: 'CHANGELOG.md')

    # Update Package dependencies
    sh('bundle', 'exec', 'swift', 'package', 'update')

    # Create and push the new branch
    release_branch = "release/#{next_version}"
    sh('git', 'checkout', '-b', release_branch)
    sh('git', 'push', '--set-upstream', 'origin', release_branch)

    # Commit and push
    pr_title = release_commit(version: next_version).to_s

    # Open the PR to main
    sh('gh', 'pr', 'create', '--title', pr_title, '--body', 'Kicking off new release', '--base', 'main', '--head', release_branch)
  end

  desc "Increment versions"
  private_lane :increment_versions do |options|
    version = options[:version].to_s
    set_key_value(file: "Sources/Authenticator/Constants/ComponentInformation.swift", key: "version", value: version)
  end

  desc "Commit and push"
  private_lane :release_commit do |options|
    next_version = options[:version]

    sh('git', 'config', '--global', 'user.email', ENV['GITHUB_EMAIL'])
    sh('git', 'config', '--global', 'user.name', ENV['GITHUB_USER'])

    commit_message = "chore: Release #{next_version}"
    sh('git', 'commit', '-am', commit_message)
    sh('git', 'push')
    commit_message
  end

  desc "Create a pre-release version by pushing a new tag to GitHub"
  lane :unstable_release do
    next_version = calculate_next_canary_version

    UI.message("Releasing Authenticator unstable version: #{next_version}")

    # Create tag and push to origin
    add_tag(version: next_version)
  end

  desc "Create a release version by pushing a new tag to GitHub and creating a new draft release"
  lane :stable_release do |options|
    next_version = options[:version]

    UI.message("Releasing Authenticator version: #{next_version}")

    # Create and push the new tag
    add_tag(version: next_version)

    # Create draft release   
    release_date = sh("echo $(date +%F)")
    release_title = "#{next_version} (#{release_date})"
    sh('gh', 'release', 'create', next_version, '--draft', '--title', release_title)
  end


  desc "Tag in git and push to GitHub"
  private_lane :add_tag do |options|
    next_tag = options[:version].to_s

    add_git_tag(tag: next_tag)
    push_git_tags(tag: next_tag)
  end
end
